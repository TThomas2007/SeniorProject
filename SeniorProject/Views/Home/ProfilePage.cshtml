@model TestWebApplication.Models.UserModel

<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Profile</title>
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
</head>
<body>
    <div class="form-group">
        <div class="alert-danger">
            @ViewBag.Message
        </div>
    </div>
    <div>
        Welcome
        <b>@User.Identity.Name</b>
        <br />

        @if (Model.UserGroupID == 1)
        {
            if (Model.HasAppointment == true)
            {
                foreach (var apt in Model.Appointments)
                {
                    
                    @:You currently have an appointment scheduled for @apt.Time.ToLongDateString() at @apt.Time.ToShortTimeString().
                    <br />
                    @Html.ActionLink("Cancel Appointment", "CancelApt", "Home", new { id = apt.AppointmentID, studentId = apt.StudentUserID, interviewerId = apt.InstructorUserID }, null);
                    <br />

                }
                <div id="enterInterview" style="display:none">
                    Your Interview is getting ready to start at @Model.AppointmentTime.Value.ToShortTimeString()! Click below to join session.
                    <br />
                    @Html.ActionLink("Join Session", "LiveInterview", "Home")
                </div>

            }
            else if (Model.HasAppointment == false)
            {
                using (Html.BeginForm("PickAppointment", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <div class="form-group">
                        @Html.Label("appointmentPick", "Please select a time from the dropdown below to set up an appointment!", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-10">
                            @Html.DropDownListFor(model => model.SelectedAvailId, new SelectList(Model.MatchedAvails, "AvailabilityID", "DateTime"), "--Select an appointment time--", null)
                            @Html.HiddenFor(model => model.SelectedAvailId)
                            @Html.HiddenFor(model => model.UserID)
                        </div>
                    </div>
                    <input type="submit" value="Pick Time" />
                }
            }
        }
        @if (Model.UserGroupID != 1)
        {


            @Html.ActionLink("Click Here to set your availability", "Availability", "Home")

            foreach (var dt in Model.AvailList)
            {
                <br />
                @dt.DateTime.ToString();
                @:&nbsp;&nbsp;&nbsp;
                @Html.ActionLink("Remove Date/Time From Availablity", "RemoveAvail", "Home", new { id = dt.AvailabilityID }, null);
                <br />
                <br />

            }
            if (Model.HasAppointment == true)
            {
                foreach (var apt in Model.Appointments)
                {

                    @:You currently have an appointment scheduled for @apt.Time.ToLongDateString() at @apt.Time.ToShortTimeString().
                    <br />
                    @Html.ActionLink("Cancel Appointment", "CancelApt", "Home", new { id = apt.AppointmentID, studentId = apt.StudentUserID, interviewerId = apt.InstructorUserID }, null);


                }
                <div id="enterInterview" style="display:none">
                    Your Interview is getting ready to start at @Model.AppointmentTime.Value.ToShortTimeString()! Click below to join session.
                    <br />
                    @Html.ActionLink("Join Session", "LiveInterview", "Home")
                </div>

            }
        }


        <br />
        @Html.ActionLink("Logout", "Logout", "Home")
    </div>

</body>
</html>
@section scripts{
    
    <script type="text/javascript">

        var dateInitial = $("#hiddenDate").val();
        var date = new Date(dateInitial);
        var dateTime = moment(date);
        var beforeTime = moment(date).subtract(30, 'minutes');
        debugger;
        $(document).ready(function () {
            
                
            
            
            if (moment().isBefore(dateTime) && moment().isAfter(beforeTime)) {
                $("#enterInterview").show();  
            }

    });
    </script>
}