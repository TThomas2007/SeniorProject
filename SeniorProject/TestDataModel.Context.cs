//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestWebApplication
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestDatabaseEntities : DbContext
    {
        public TestDatabaseEntities()
            : base("name=TestDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Availability> Availabilities { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Resume> Resumes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int AddPasswordResetCode(string email, string resetCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var resetCodeParameter = resetCode != null ?
                new ObjectParameter("ResetCode", resetCode) :
                new ObjectParameter("ResetCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPasswordResetCode", emailParameter, resetCodeParameter);
        }
    
        public virtual int ChangePassword(string password, string resetCode)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var resetCodeParameter = resetCode != null ?
                new ObjectParameter("ResetCode", resetCode) :
                new ObjectParameter("ResetCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePassword", passwordParameter, resetCodeParameter);
        }
    
        public virtual int ConfirmApt(Nullable<int> aptID, Nullable<int> studentUserID, Nullable<int> instructorUserID)
        {
            var aptIDParameter = aptID.HasValue ?
                new ObjectParameter("AptID", aptID) :
                new ObjectParameter("AptID", typeof(int));
    
            var studentUserIDParameter = studentUserID.HasValue ?
                new ObjectParameter("StudentUserID", studentUserID) :
                new ObjectParameter("StudentUserID", typeof(int));
    
            var instructorUserIDParameter = instructorUserID.HasValue ?
                new ObjectParameter("InstructorUserID", instructorUserID) :
                new ObjectParameter("InstructorUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfirmApt", aptIDParameter, studentUserIDParameter, instructorUserIDParameter);
        }
    
        public virtual int ConfirmEmail(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfirmEmail", userIDParameter);
        }
    
        public virtual int DeleteApt(Nullable<int> aptID, Nullable<int> studentUserID, Nullable<int> interviewerID)
        {
            var aptIDParameter = aptID.HasValue ?
                new ObjectParameter("AptID", aptID) :
                new ObjectParameter("AptID", typeof(int));
    
            var studentUserIDParameter = studentUserID.HasValue ?
                new ObjectParameter("StudentUserID", studentUserID) :
                new ObjectParameter("StudentUserID", typeof(int));
    
            var interviewerIDParameter = interviewerID.HasValue ?
                new ObjectParameter("InterviewerID", interviewerID) :
                new ObjectParameter("InterviewerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteApt", aptIDParameter, studentUserIDParameter, interviewerIDParameter);
        }
    
        public virtual int DeleteAvail(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAvail", iDParameter);
        }
    
        public virtual ObjectResult<string> GetEmailFromUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetEmailFromUserID", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetHighestUserID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetHighestUserID");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetInstructorAppointmentTime(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetInstructorAppointmentTime", useridParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetStudentAppointmentTime(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetStudentAppointmentTime", useridParameter);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", usernameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Insert_User(string username, string password, string email, Nullable<System.Guid> activationCode, Nullable<int> userGroupID, Nullable<int> userTypeID)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activationCodeParameter = activationCode.HasValue ?
                new ObjectParameter("ActivationCode", activationCode) :
                new ObjectParameter("ActivationCode", typeof(System.Guid));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Insert_User", usernameParameter, passwordParameter, emailParameter, activationCodeParameter, userGroupIDParameter, userTypeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertAppointment(Nullable<int> userID, Nullable<int> instructorID, Nullable<System.DateTime> dateTime, Nullable<System.Guid> confirmCode, Nullable<int> availID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var instructorIDParameter = instructorID.HasValue ?
                new ObjectParameter("InstructorID", instructorID) :
                new ObjectParameter("InstructorID", typeof(int));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var confirmCodeParameter = confirmCode.HasValue ?
                new ObjectParameter("ConfirmCode", confirmCode) :
                new ObjectParameter("ConfirmCode", typeof(System.Guid));
    
            var availIDParameter = availID.HasValue ?
                new ObjectParameter("AvailID", availID) :
                new ObjectParameter("AvailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertAppointment", userIDParameter, instructorIDParameter, dateTimeParameter, confirmCodeParameter, availIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertAvailablity(Nullable<int> userID, Nullable<int> userTypeID, Nullable<System.DateTime> dateTime)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertAvailablity", userIDParameter, userTypeIDParameter, dateTimeParameter);
        }
    
        public virtual int Upload_Resume(Nullable<int> userID, byte[] file, Nullable<int> fileSize)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fileParameter = file != null ?
                new ObjectParameter("File", file) :
                new ObjectParameter("File", typeof(byte[]));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Upload_Resume", userIDParameter, fileParameter, fileSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Validate_User(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Validate_User", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> GetUserNameFromID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserNameFromID", userIDParameter);
        }
    }
}
